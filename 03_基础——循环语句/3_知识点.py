"""
1.while循环的基础语法、嵌套应用
2.for循环的基础语法 （range语句）（变量作用域）、嵌套应用
3.循环中断：break和continue
"""
"""
for和while的区别：
    ·while循环的循环条件是自定义的，自行控制循环条件
    ·for循环是一种“轮询”机制，是对一批内容进行“逐个处理”
    
"""
"""
1. while循环
    基础语法：
        while 条件：
            条件满足时，执行的事情1
            条件满足时，执行的事情2
            条件满足时，执行的事情3
                  .....
            条件满足时，执行的事情N
            
        只要条件满足，会无限循环执行
    
    注意：
        1. while的条件需得到布尔类型，True表示继续循环，False表示结束循环
        2·需要设置循环终止的条件,如i+= 1配合i<100,就能确保100次后停止,否则将无限循环
        3.空格缩进和if判断一样,都需要设置
"""
# # 例子
# a = 1
# while a <= 100:
#     print(f"输出一百次,这是第{a}次")
#     a += 1

"""
while循环嵌套应用
    语法：
        while 条件1：
            条件1满足时，执行的事情1
            条件1满足时，执行的事情2
            条件1满足时，执行的事情3
                  .....
            条件1满足时，执行的事情N
            
            while 条件2：
                条件2满足时，执行的事情1
                条件2满足时，执行的事情2
                条件2满足时，执行的事情3
                      .....
                条件2满足时，执行的事情N
    注意：
        1.注意条件的控制，避免无限循环
        2.多层嵌套，主要空格缩进来确定层次关系
        
    补充：
        1.制表符：\t,效果相当于：tab键
            它可以使多行字符串进行对齐
        2.输出不换行功能：
            在print语句中加入end='' 就可以实现不换行输出了
            格式：
                print（"内容",end=''）
"""
# # 例子 制表符
# print("holle\tword")
# print("python\tno")
# # 例子 输出不换行
# print("holle", end='')
# print("word")
"""
2.for循环——基础语法
    for循环就是将“待办事项”逐个完成的循环机制
    基础语法：
        for 临时变量 in 待处理数据集：
            循环满足条件时执行的代码
    语法中的：“待处理数据集”，严格来说，称之为“序列类型”
    序列类型指：“其内容可以一个个依次取出的一种类型”
    包括：
        ·字符串
        ·列表
        ·元组
        ·等...
        
    由例子可以看出：
        for循环就是将字符串的内容：“依次取出”
        所以，for循环也被称之为：“遍历循环”
    
    同while循环不同，for循环是无法定义循环条件的。
    只能从被处理的数据集中，依次取出内容进行处理。
    所以，理论上讲，Python的for循环无法构建无限循环（被处理的数据集不可能无限大）
    
    注意：
        ·无法定义循环条件，只能被动取出数据处理
        ·循环内的语句，需要有空格缩进        
"""
# # 例子
# name = "12345678"
# for x in name:
#     # 将name的内容，挨个取出赋予x临时变量
#     # 就可在循环体内对x进行处理
#     print(x)
"""
for循环——range语句
     语法1：
        range(num)
     获取一个从0开始，到怒骂结束的数字序列（不包含num本身）
     如：range(5)取得的数据是：[1,2,3,4]
     
     语法2：
        range（num1，num2）
     获得一个从num1开始，到num2结束的数字序列（不含num2本身）
     如：range（5，10）取得的数据是[5,6,7,8,9]
     
     语法3：
        range（num1，num2，step）
     获得一个从num1开始，到num2结束的数字序列（不含num2本身）
     数字之间的步长，以step为准（step默认为1）
     如：range（5，10，2）取得的数据是[5,7,9]
"""
# # 例子 语法1
# for x in range(5):
#     print(x)

# 例子 语法2
# for x in range(5,10):
#     print(x)

# # 例子 语法3
# for x in range(5,10,2):
#     print(x)
"""
for循环——变量作用域
    临时变量,在编程规范上,作用范围(作用域),只限定在for循环内部
    如果在for循环外部访问临时变量：
        ·实际上是可以访问到的
        ·在编程规范上，是不允许、不建议这么做的
        如果要在外部访问临时变量，可以在循环上面定义一下临时变量
        使代码变得优雅~
"""
"""
for循环的嵌套应用
    格式：
        for循环 或 while循环：
            循环满足条件应做的事情1
            循环满足条件应做的事情2
                  .....
            循环满足条件应做的事情N
            ....
            for循环 或 while循环：
                循环满足条件应做的事情1
                循环满足条件应做的事情2
                      .....
                循环满足条件应做的事情N
   
    for循环 和 while循环之间可以相互嵌套
"""
"""
循环中断：continue和break
    continue: 只可以控制（它所在的循环结束）无法对上层循环起作用
        continue关键字用于：“中断本次”循环，“直接进入下一次”循环
        continue可运用于：for循环和while循环，效果一致
        continue关键字：
            for i in range(1,100):     
                语句1            #左侧代码 
                continue        #在循环内，遇到continue就结束当次循环，进行下一次
                语句2            #所以，语句2是不会执行的
        应用场景：
            在循环中，因某些原因，临时结束本次循环
        
    break: 同样只可以控制（它所在的循环结束）无法对上层循环起作用
        break关键字用于：”直接结束循环”
        break可以用于：for循环和while循环，效果一致
        break关键字:
             for i in range(1,100): 
                语句1             #左侧代码
                break            #在循环内，遇到break就结束循环了
                语句2             #所以，执行了语句1后，直接执行语句3了
             语句3   
        
             
"""








