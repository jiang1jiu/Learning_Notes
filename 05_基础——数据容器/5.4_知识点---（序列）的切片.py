"""
1.引入
"""
"""
1.序列
    序列是指：内容连续、有序，可使用下标索引的一类数据容器
    列表、元组、字符串，均可以可以视为序列。
2.序列的常用操作
    2.1.切片
        定义：
            序列支持切片
            即:列表、元组、字符串,均支持进行切片操作切片：从一个序列中，取出一个子序列
        语法：
            序列[起始下标：结束下标:步长] 
        语法解释：
            表示从序列中，从指定位置开始，依次取出元素，到指定位置结束，得到一个新序列：
                1.起始下标表示从何处开始，可以留空，留空视作从头开始
                2.结束下标（不含）表示何处结束，可以留空，留空视作截取到结尾
                3.步长表示，依次取元素的间隔
                    1.步长1表示，一个个取元素   #  步长默认1可省略不写
                    2.步长2表示，每次跳过1个元素取
                    3.步长N表示，每次跳过N-1个元素取
                    4.步长为负数表示，反向取（注意，起始下标和结束下标也要反向标记）
        注意：
            此操作不会影响序列本身，而是会得到一个新的序列（列表、元组、字符串）
    总结：
        1.什么是序列?
            内容连续、有序,支持下标索引的一类数据容器
        2,哪些数据容器可以视为序列?
            列表、元组、字符串
        3. 序列如何做切片
            序列[起始：结束：步长]
                起始可以省略，省略从头开始
                结束可以省略，省略到尾结束
                步长可以省略,省略步长为1 (可以为负数,表示倒序执行)
"""
# 切片的相关操作
# 1.对List进行切片，从1开始，4结束，步长1
my_list = [0, 1, 2, 3, 4, 5, 6]
new_list = my_list[1:4]  # 步长默认1可省略不写
print(f"对List进行切片，从1开始，4结束，步长1的结果是{new_list}")
# 2.对tuple进行切片，从头开始，到最后结束，步长1
my_tuple = [0, 1, 2, 3, 4, 5, 6]
new_tuple = my_tuple[:]   # 从头开始可以省略，到最后结束也可以省略，步长1也能省略
print(f"对tuple进行切片，从头开始，到最后结束，步长1的结果是{new_tuple}")
# 3.对str进行切片，从头开始，到最后结束，步长2
my_str = '123456789'
new_str = my_str[::2]   # 从头开始可以省略，到最后结束也可以省略
print(f"对str进行切片，从头开始，到最后结束，步长2的结果是{new_str}")
# 4.对str进行切片，从头开始，到最后结束，步长-1
my_str = '123456789'
str1 = my_str[::-1]
print(f"对str进行切片，从头开始，到最后结束，步长-1的结果是{str1}")
# 5.对列表进行切片，从3开始，到1结束，步长-1
my_list = [0, 1, 2, 3, 4, 5, 6]
list1 = my_list[3:1:-1]
print(f"对列表进行切片，从3开始，到1结束，步长-1的结果是{list1}")
# 6.对元组进行切片，从头开始，到尾结束，步长-2
my = (1, 2, 3, 4, 5, 6)
my1 = my[::-2]
print(f"对元组进行切片，从头开始，到尾结束，步长-2的结果是{my1}")

