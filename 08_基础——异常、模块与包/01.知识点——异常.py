"""
目录：
    1.了解异常
    2.捕获异常
    3.捕获指定异常
    4.捕获多个异常
    5.捕获全部异常
    6.异常else
    7.finally语法
    8.异常的传递
"""
"""
1.了解异常
    什么是异常：
        当检测到一个错误时, Python解释器就无法继续执行了,
        反而出现了一些错误的提示,这就是所谓的“异常”,也就是我们常说的BUG
2.捕获异常
    捕获异常的作用在于:
        提前假设某处会出现异常,做好提前准备,当真的出现异常的时候,可以有后续手段。
    语法：
        try：
            可能发生错误的代码
        except：
            如果出现异常执行的代码
3.捕获指定异常
    语法：
         try：
            可能发生错误的代码
        except 要指定捕获的异常 as e：   # e：异常的对象（可以用来打印），是个变量，可以改成任意名字
            如果出现异常执行的代码
    注意：
        指定捕获异常，只会捕获的设定的异常，没有指定的则不会捕获，依旧会报错
4.捕获多个异常：
    语法：
        try：
            可能发生错误的代码
        except (指定捕获的异常1，异常2,..,)：
            如果出现异常执行的代码
5.捕获全部异常（和1效果差不多） 常用的
    语法：
        try：
            可能发生错误的代码
        except Exception as e：
            如果出现异常执行的代码
6.异常else   
     try：
        可能发生错误的代码
     except Exception as e：
        如果出现异常执行的代码
     else：                       
        没有异常时执行的代码   
7.finally语法    一般用于关闭资源  比如关闭文件
    语法：
        try：
            可能发生错误的代码
        except Exception as e：
            如果出现异常执行的代码  
        finally：
             无论有没有异常都要执行的代码 
8.异常的传递
    定义：
        当函数func01中发生异常,并且没有捕获处理这个异常的
        时候,异常会传递到函数func02,当func02也没有捕获处理这个
        异常的时候main函数会捕获这个异常， 这就是异常的传递性.
    提示：
        当所有函数都没有捕获异常的时候，程序就会报错
    例如：
        08_基础——异常、模块与包/图片知识点/异常的传递性.png   
"""
# 例2
try:
    f = open('文件/2.txt', 'r', encoding="utf-8")
except:
    f = open('文件/2.txt', 'w', encoding="utf-8")
