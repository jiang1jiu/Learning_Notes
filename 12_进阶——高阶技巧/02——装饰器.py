
# 装饰器其实也是一种闭包，
# 其功能就是在不破坏目标函数原有的代码和功能的前提下，为目标函数增加新功能。

def outer(func):
    """
    外层装饰器函数，用于包裹其他函数以增加额外功能。

    参数:
        func: 一个函数对象，表示将被装饰的函数。

    返回:
        inner: 内层函数，包含了额外的功能和对原函数的调用。
    """
    def inner():
        """
        内层装饰器函数，用于定义装饰逻辑和调用原函数。

        这里增加了睡觉前和醒来后的打印消息，用于在调用原函数前后执行。
        """
        print("我要睡觉了..")
        func()  # 调用传入的函数对象，即被装饰的函数。
        print("我睡醒了..")

    return inner


# @outer用法叫做语法糖
@outer
def sleep():
    """
    模拟睡觉的函数，包含一段随机时间的睡眠过程。

    这里使用了time.sleep来模拟睡觉过程，并随机睡眠时间以更贴近实际情况。
    """
    import time
    import random
    print("睡眠中...")
    time.sleep(random.randint(1, 5))  # 模拟睡觉，随机睡眠1到5秒。


# 调用装饰后的sleep函数。
sleep()










